DBNS({'Angle': LV(X='Angle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611de480>), 'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6510>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611c7630>)}, {'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6af8>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f4828>)}) = 0.6666666666666666
TS({'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, {'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'})=1.0
TS({'zero', 'very positive', 'negative', 'positive', 'very negative'}, {'zero', 'very positive', 'negative', 'positive', 'very negative'})=1.0
aggregation of (1.0, 1.0) is: 1.0
DBTS({'Angle': LV(X='Angle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611de480>), 'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6510>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611c7630>)}, {'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6af8>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f4828>)})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f94611db378>, <function trapmf.<locals>.<lambda> at 0x7f9461191598>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f94611dbc80>, <function trapmf.<locals>.<lambda> at 0x7f9461191510>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f946114ae18>, <function trapmf.<locals>.<lambda> at 0x7f94611917b8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f94611db730>, <function trapmf.<locals>.<lambda> at 0x7f94611916a8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f94611db268>, <function trapmf.<locals>.<lambda> at 0x7f9461191620>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f94611dbae8>, <function trapmf.<locals>.<lambda> at 0x7f9461193f28>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f94611db950>, <function trapmf.<locals>.<lambda> at 0x7f9461191730>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f946114ac80>, <function trapmf.<locals>.<lambda> at 0x7f9461191950>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f946114ad08>, <function trapmf.<locals>.<lambda> at 0x7f94611918c8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f946114a158>, <function trapmf.<locals>.<lambda> at 0x7f94611919d8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f946114ad90>, <function trapmf.<locals>.<lambda> at 0x7f9461191840>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f946114a1e0>, <function trapmf.<locals>.<lambda> at 0x7f9461191a60>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
aggregation of (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) is: 1.0
DBIS({'Angle': LV(X='Angle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611de480>), 'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6510>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611c7630>)}, {'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6af8>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f4828>)})=1.0
aggregation of (1.0, 1.0) is: 1.0
DBS({'Angle': LV(X='Angle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611de480>), 'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6510>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611c7630>)}, {'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6af8>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f4828>)}) = 0.6666666666666666
DEBUG: RULE BASE SIMILARITY FORCED TO 1
aggregation of (0.6666666666666666, 1) is: 0.8333333333333333
KBS(FRBS(DB={'Angle': LV(X='Angle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611de480>), 'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6510>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611c7630>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='ChangeAngle', t='positive'), SoftCostraint(X='Angle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='ChangeAngle', t='very positive'), SoftCostraint(X='Angle', t='negative')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='ChangeAngle', t='zero'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='ChangeAngle', t='positive'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='ChangeAngle', t='very positive'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative'), SoftCostraint(X='Angle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='ChangeAngle', t='positive or very positive'), SoftCostraint(X='Angle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))}), FRBS(DB={'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6af8>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f4828>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='ChangeAngle', t='positive'), SoftCostraint(X='Angle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='ChangeAngle', t='very positive'), SoftCostraint(X='Angle', t='negative')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='ChangeAngle', t='zero'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='ChangeAngle', t='positive'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='ChangeAngle', t='very positive'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative'), SoftCostraint(X='Angle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='ChangeAngle', t='positive or very positive'), SoftCostraint(X='Angle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))}))=0.8333333333333333
aggregation of (0.8333333333333333,) is: 0.8333333333333333
DS((FRBS(DB={'Angle': LV(X='Angle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611de480>), 'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6510>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611c7630>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='ChangeAngle', t='positive'), SoftCostraint(X='Angle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='ChangeAngle', t='very positive'), SoftCostraint(X='Angle', t='negative')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='ChangeAngle', t='zero'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='ChangeAngle', t='positive'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='ChangeAngle', t='very positive'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative'), SoftCostraint(X='Angle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='ChangeAngle', t='positive or very positive'), SoftCostraint(X='Angle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))}), FRBS(DB={'ChangeAngle': LV(X='ChangeAngle', T={'zero', 'very positive', 'very negative or negative', 'positive or very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f6af8>), 'Force': LV(X='Force', T={'zero', 'very positive', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f94611f4828>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='ChangeAngle', t='positive'), SoftCostraint(X='Angle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='ChangeAngle', t='very positive'), SoftCostraint(X='Angle', t='negative')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='ChangeAngle', t='zero'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='ChangeAngle', t='positive'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='ChangeAngle', t='very positive'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative'), SoftCostraint(X='Angle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='ChangeAngle', t='positive or very positive'), SoftCostraint(X='Angle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))})))=0.8333333333333333
0.8333333333333333
