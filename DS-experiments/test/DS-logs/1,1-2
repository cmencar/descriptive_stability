DBNS({'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd231b0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6cf0>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd753f0>)}, {'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30c18>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781ed90900>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dcfcf78>)}) = 1.0
TS({'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, {'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'})=1.0
TS({'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, {'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'})=1.0
TS({'very positive', 'zero', 'negative', 'positive', 'very negative'}, {'very positive', 'zero', 'negative', 'positive', 'very negative'})=1.0
aggregation of (1.0, 1.0, 1.0) is: 1.0
DBTS({'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd231b0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6cf0>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd753f0>)}, {'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30c18>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781ed90900>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dcfcf78>)})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f7825aa0ea0>, <function trapmf.<locals>.<lambda> at 0x7f781dce7840>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f7825aa0bf8>, <function trapmf.<locals>.<lambda> at 0x7f781dce7620>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f7825aa0f28>, <function trapmf.<locals>.<lambda> at 0x7f781dd6d378>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f7840472598>, <function trapmf.<locals>.<lambda> at 0x7f781dc59158>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=0.0
IS(<function trapmf.<locals>.<lambda> at 0x7f7825aa0c80>, <function trapmf.<locals>.<lambda> at 0x7f781dce7a60>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f7825aa0b70>, <function trapmf.<locals>.<lambda> at 0x7f781dce7d90>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781ddf66a8>, <function trapmf.<locals>.<lambda> at 0x7f781dc596a8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc598c8>, <function trapmf.<locals>.<lambda> at 0x7f781dc468c8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc59598>, <function trapmf.<locals>.<lambda> at 0x7f781dc467b8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc59840>, <function trapmf.<locals>.<lambda> at 0x7f781dc46950>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f7825aa0e18>, <function trapmf.<locals>.<lambda> at 0x7f781dc46620>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc597b8>, <function trapmf.<locals>.<lambda> at 0x7f781dc46840>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc59268>, <function trapmf.<locals>.<lambda> at 0x7f781dc46730>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f7825aa0d08>, <function trapmf.<locals>.<lambda> at 0x7f781dc466a8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dcc32f0>, <function trapmf.<locals>.<lambda> at 0x7f781dc46ae8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc59730>, <function trapmf.<locals>.<lambda> at 0x7f781dc46a60>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dcc3ae8>, <function trapmf.<locals>.<lambda> at 0x7f781dc461e0>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dcc3378>, <function trapmf.<locals>.<lambda> at 0x7f781dc46598>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc59ae8>, <function trapmf.<locals>.<lambda> at 0x7f781dc469d8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
aggregation of (1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) is: 0.9473684210526312
DBIS({'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd231b0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6cf0>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd753f0>)}, {'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30c18>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781ed90900>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dcfcf78>)})=0.9473684210526312
aggregation of (1.0, 1.0, 0.9473684210526312) is: 0.9824561403508769
DBS({'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd231b0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6cf0>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd753f0>)}, {'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30c18>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781ed90900>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dcfcf78>)}) = 0.9824561403508769
DEBUG: RULE BASE SIMILARITY FORCED TO 1
aggregation of (0.9824561403508769, 1) is: 0.9912280701754385
KBS(FRBS(DB={'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd231b0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6cf0>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd753f0>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='Angle', t='positive or very positive'), SoftCostraint(X='ChangeAngle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))}), FRBS(DB={'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30c18>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781ed90900>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dcfcf78>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='Angle', t='positive or very positive'), SoftCostraint(X='ChangeAngle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))}))=0.9912280701754385
aggregation of (0.9912280701754385,) is: 0.9912280701754385
DS((FRBS(DB={'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd231b0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6cf0>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd753f0>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='Angle', t='positive or very positive'), SoftCostraint(X='ChangeAngle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))}), FRBS(DB={'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30c18>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781ed90900>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dcfcf78>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='Angle', t='positive or very positive'), SoftCostraint(X='ChangeAngle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))})))=0.9912280701754385
0.9912280701754385
