DBNS({'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa67e0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dc1d9d8>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30b40>)}, {'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825b39bd0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6a68>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6708>)}) = 1.0
TS({'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, {'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive'})=0.8571428571428571
TS({'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, {'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'})=1.0
TS({'very positive', 'zero', 'negative', 'positive', 'very negative'}, {'very positive', 'zero', 'negative', 'positive', 'very negative'})=1.0
aggregation of (0.8571428571428571, 1.0, 1.0) is: 0.9523809523809523
DBTS({'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa67e0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dc1d9d8>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30b40>)}, {'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825b39bd0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6a68>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6708>)})=0.9523809523809523
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc467b8>, <function trapmf.<locals>.<lambda> at 0x7f781dcc3bf8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc468c8>, <function trapmf.<locals>.<lambda> at 0x7f781dcc3400>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc46730>, <function trapmf.<locals>.<lambda> at 0x7f781dcc3f28>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc46840>, <function trapmf.<locals>.<lambda> at 0x7f781dcc3d08>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc46950>, <function trapmf.<locals>.<lambda> at 0x7f781dcc3e18>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc46a60>, <function trapmf.<locals>.<lambda> at 0x7f781dd34268>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dce7d90>, <function trapmf.<locals>.<lambda> at 0x7f781dc2cc80>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dce7a60>, <function trapmf.<locals>.<lambda> at 0x7f7825aea840>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc596a8>, <function trapmf.<locals>.<lambda> at 0x7f781dc2cea0>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc466a8>, <function trapmf.<locals>.<lambda> at 0x7f781dcc3158>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dce7620>, <function trapmf.<locals>.<lambda> at 0x7f781dc2c8c8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dce7840>, <function trapmf.<locals>.<lambda> at 0x7f781dcc3510>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc46620>, <function trapmf.<locals>.<lambda> at 0x7f781dcc3b70>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc2c840>, <function trapmf.<locals>.<lambda> at 0x7f781dc2ca60>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc59158>, <function trapmf.<locals>.<lambda> at 0x7f781dc2c0d0>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc2cf28>, <function trapmf.<locals>.<lambda> at 0x7f781dc2c378>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc2a400>, <function trapmf.<locals>.<lambda> at 0x7f781dc2c6a8>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
IS(<function trapmf.<locals>.<lambda> at 0x7f781dc2ae18>, <function trapmf.<locals>.<lambda> at 0x7f781dc2c510>, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, {0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0})=1.0
aggregation of (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0) is: 1.0000000000000002
DBIS({'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa67e0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dc1d9d8>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30b40>)}, {'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825b39bd0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6a68>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6708>)})=1.0000000000000002
aggregation of (1.0, 0.9523809523809523, 1.0000000000000002) is: 0.9841269841269841
DBS({'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa67e0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dc1d9d8>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30b40>)}, {'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825b39bd0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6a68>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6708>)}) = 0.9841269841269841
DEBUG: RULE BASE SIMILARITY FORCED TO 1
aggregation of (0.9841269841269841, 1) is: 0.9920634920634921
KBS(FRBS(DB={'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa67e0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dc1d9d8>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30b40>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='Angle', t='positive or very positive'), SoftCostraint(X='ChangeAngle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))}), FRBS(DB={'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825b39bd0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6a68>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6708>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='Angle', t='positive or very positive'), SoftCostraint(X='ChangeAngle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))}))=0.9920634920634921
aggregation of (0.9920634920634921,) is: 0.9920634920634921
DS((FRBS(DB={'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa67e0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dc1d9d8>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f781dd30b40>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='Angle', t='positive or very positive'), SoftCostraint(X='ChangeAngle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))}), FRBS(DB={'Angle': LV(X='Angle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825b39bd0>), 'ChangeAngle': LV(X='ChangeAngle', T={'very positive', 'zero', 'very negative or negative', 'negative', 'positive', 'positive or very positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6a68>), 'Force': LV(X='Force', T={'very positive', 'zero', 'negative', 'positive', 'very negative'}, U={0.0, 226.66666666666666, 198.33333333333331, 170.0, 141.66666666666666, 113.33333333333333, 85.0, 56.666666666666664, 28.333333333333332, 255.0}, G={}, μ=<built-in method get of dict object at 0x7f7825aa6708>)}, RB={'rule1': Rule(A={SoftCostraint(X='ChangeAngle', t='very negative or negative'), SoftCostraint(X='Angle', t='very negative or negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule2': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule3': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule4': Rule(A={SoftCostraint(X='Angle', t='very negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule5': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule6': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule7': Rule(A={SoftCostraint(X='Angle', t='negative'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule8': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='very negative', ctype='mamdani')), 'rule9': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='zero')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule10': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule11': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule12': Rule(A={SoftCostraint(X='Angle', t='zero'), SoftCostraint(X='ChangeAngle', t='very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule13': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='negative', ctype='mamdani')), 'rule14': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule15': Rule(A={SoftCostraint(X='Angle', t='positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule16': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='very negative')}, C=Consequent(Y='Force', w='zero', ctype='mamdani')), 'rule17': Rule(A={SoftCostraint(X='ChangeAngle', t='negative'), SoftCostraint(X='Angle', t='very positive')}, C=Consequent(Y='Force', w='positive', ctype='mamdani')), 'rule18': Rule(A={SoftCostraint(X='Angle', t='very positive'), SoftCostraint(X='ChangeAngle', t='zero')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani')), 'rule19': Rule(A={SoftCostraint(X='Angle', t='positive or very positive'), SoftCostraint(X='ChangeAngle', t='positive or very positive')}, C=Consequent(Y='Force', w='very positive', ctype='mamdani'))})))=0.9920634920634921
0.9920634920634921
